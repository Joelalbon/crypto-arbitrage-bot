#!/usr/bin/env python3
"""
Smart Contract Deployment Script
Deploys the FlashLoanArbitrage contract to multiple networks
"""

import asyncio
import json
import os
import argparse
from typing import Dict, List
from web3 import Web3
from eth_account import Account
from dotenv import load_dotenv

load_dotenv()

class ContractDeployer:
    def __init__(self):
        self.networks = {
            'polygon': {
                'rpc': os.getenv('POLYGON_RPC', 'https://polygon-rpc.com'),
                'private_key': os.getenv('POLYGON_PRIVATE_KEY'),
                'aave_pool_provider': '0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb',
                'explorer': 'https://polygonscan.com'
            },
            'bsc': {
                'rpc': os.getenv('BSC_RPC', 'https://bsc-dataseed.binance.org'),
                'private_key': os.getenv('BSC_PRIVATE_KEY'),
                'aave_pool_provider': '0xff75B6da14FfbbFD88561a135b3B5E5c9D2aE99d',
                'explorer': 'https://bscscan.com'
            },
            'avalanche': {
                'rpc': os.getenv('AVALANCHE_RPC', 'https://api.avax.network/ext/bc/C/rpc'),
                'private_key': os.getenv('AVALANCHE_PRIVATE_KEY'),
                'aave_pool_provider': '0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb',
                'explorer': 'https://snowtrace.io'
            }
        }
        
    def _get_compiled_contract(self) -> tuple:
        """Get compiled contract ABI and bytecode"""
        # This should be replaced with actual compiled bytecode
        # For now, we'll use placeholder values
        abi = [
            {
                "inputs": [{"internalType": "address", "name": "_addressProvider", "type": "address"}],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "inputs": [
                    {"components": [{"internalType": "address", "name": "tokenA", "type": "address"}, {"internalType": "address", "name": "tokenB", "type": "address"}, {"internalType": "uint256", "name": "amount", "type": "uint256"}, {"internalType": "address", "name": "dexRouter1", "type": "address"}, {"internalType": "address", "name": "dexRouter2", "type": "address"}, {"internalType": "uint256", "name": "minProfit", "type": "uint256"}], "internalType": "struct FlashLoanArbitrage.ArbitrageParams", "name": "params", "type": "tuple"}
                ],
                "name": "executeArbitrage",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [{"internalType": "address", "name": "token", "type": "address"}],
                "name": "getBalance",
                "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
                "stateMutability": "view",
                "type": "function"
            }
        ]
        
        # Placeholder bytecode - replace with actual compiled bytecode
        bytecode = "0x608060405234801561001057600080fd5b50604051610c02380380610c02833981810160405281019061003291906101a2565b61004e6100476100a460201b60201c565b6100ac60201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156100be57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506101d9565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061019d82610172565b9050919050565b6101ad81610192565b81146101b857600080fd5b50565b6000815190506101ca816101a4565b92915050565b6000602082840312156101e6576101e561019f565b5b60006101f4848285016101bb565b91505092915050565b61020681610192565b82525050565b600060208201905061022160008301846101fd565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610261578082015181840152602081019050610246565b60008484015250505050565b6000601f19601f8301169050919050565b600061028982610227565b6102938185610232565b93506102a3818560208601610243565b6102ac8161026d565b840191505092915050565b600060208201905081810360008301526102d1818461027e565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061068f57607f821691505b6020821081036106a2576106a161043a565b5b50919050565b6106b281610678565b81146106bd57600080fd5b50565b6000815190506106cf816106a9565b92915050565b6000602082840312156106eb576106ea6106ab565b5b60006106f9848285016106c0565b91505092915050565b61070d8261067e565b9050919050565b61071d81610702565b811461072857600080fd5b50565b60008151905061073a81610714565b92915050565b6000602082840312156107565761075561071f565b5b60006107648482850161072b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156107a4578082015181840152602081019050610789565b60008484015250505050565b6000601f19601f8301169050919050565b60006107cc8261076b565b6107d68185610776565b93506107e6818560208601610794565b6107ef8161079a565b840191505092915050565b6000602082019050818103600083015261081381846107bf565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000600282049050600182168061085f57607f821691505b60208210810361087257610871610818565b5b50919050565b61088281610848565b811461088d57600080fd5b50565b60008151905061089f81610879565b92915050565b6000602082840312156108bb576108ba610884565b5b60006108c984828501610890565b91505092915050565b6108db81610848565b82525050565b60006020820190506108f660008301846108d2565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561093657808201518184015260208101905061091b565b60008484015250505050565b6000601f19601f8301169050919050565b600061095e82610923565b610968818561092e565b9350610978818560208601610931565b61098181610925565b840191505092915050565b600060208201905081810360008301526109a58184610953565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060028204905060018216806109f157607f821691505b602082108103610a0457610a036109aa565b5b50919050565b610a14816109e0565b8114610a1f57600080fd5b50565b600081519050610a3181610a0d565b92915050565b600060208284031215610a4d57610a4c610a17565b5b6000610a5b84828501610a22565b91505092915050565b610a6d816109e0565b82525050565b6000602082019050610a886000830184610a64565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ac8578082015181840152602081019050610aad565b60008484015250505050565b6000601f19601f8301169050919050565b6000610af082610a95565b610afa8185610aa0565b9350610b0a818560208601610ab3565b610b1381610aa6565b840191505092915050565b60006020820190508181036000830152610b378184610ae3565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006002820490506001821680610b8357607f821691505b602082108103610b9657610b95610b3e565b5b50919050565b610ba681610b72565b8114610bb157600080fd5b50565b600081519050610bc381610ba3565b92915050565b600060208284031215610bdf57610bde610ba6565b5b6000610bed84828501610bb4565b91505092915050565b610bff81610b72565b82525050565b6000602082019050610c1a6000830184610bf6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c5a578082015181840152602081019050610c3f565b60008484015250505050565b6000601f19601f8301169050919050565b6000610c8282610c40565b610c8c8185610c4b565b9350610c9c818560208601610c5e565b610ca581610c51565b840191505092915050565b60006020820190508181036000830152610cc98184610c75565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006002820490506001821680610d1557607f821691505b602082108103610d2857610d27610cce565b5b50919050565b610d3881610d04565b8114610d4357600080fd5b50565b600081519050610d5581610d31565b92915050565b600060208284031215610d7157610d70610d3a565b5b6000610d7f84828501610d46565b91505092915050565b610d9181610d04565b82525050565b6000602082019050610dac6000830184610d88565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610dec578082015181840152602081019050610dd1565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e1482610dd2565b610e1e8185610ddd565b9350610e2e818560208601610de0565b610e3781610dd6565b840191505092915050565b60006020820190508181036000830152610e5b8184610e07565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006002820490506001821680610ea757607f821691505b602082108103610eba57610eb9610e61565b5b50919050565b610eca81610e96565b8114610ed557600080fd5b50565b600081519050610ee781610ec1565b92915050565b600060208284031215610f0357610f02610ecd565b5b6000610f1184828501610ede565b91505092915050565b610f2381610e96565b82525050565b6000602082019050610f3e6000830184610f1a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f7e578082015181840152602081019050610f63565b60008484015250505050565b6000601f19601f8301169050919050565b6000610fa682610f44565b610fb08185610f4f565b9350610fc0818560208601610f69565b610fc981610f55565b840191505092915050565b60006020820190508181036000830152610fed8184610f99565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000600282049050600182168061103957607f821691505b60208210810361104c5761104b610ff2565b5b50919050565b611058611024565b811461106357600080fd5b50565b6000815190506110758161104f565b92915050565b6000602082840312156110915761109061105a565b5b600061109f84828501611066565b91505092915050565b6110b181611024565b82525050565b60006020820190506110cc60008301846110a8565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561110c5780820151818401526020810190506110f1565b60008484015250505050565b6000601f19601f8301169050919050565b600061113482611118565b61113e8185611123565b935061114e81856020860161110d565b61115781611114565b840191505092915050565b6000602082019050818103600083015261117b8184611129565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060028204905060018216806111c757607f821691505b6020821081036111da576111d9611180565b5b50919050565b6111ea6111c2565b81146111f557600080fd5b50565b600081519050611207816111e1565b92915050565b600060208284031215611223576112226111ed565b5b6000611231848285016111f8565b91505092915050565b6112436111c2565b82525050565b600060208201905061125e600083018461123a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561129e578082015181840152602081019050611283565b60008484015250505050565b6000601f19601f8301169050919050565b60006112c6826112a4565b6112d081856112af565b93506112e0818560208601611293565b6112e9816129b565b840191505092915050565b6000602082019050818103600083015261130d81846112ba565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000600282049050600182168061135957607f821691505b60208210810361136c5761136b611312565b5b50919050565b61137c611348565b811461138757600080fd5b50565b60008151905061139981611373565b92915050565b6000602082840312156113b5576113b461137f565b5b60006113c38482850161138a565b91505092915050565b6113d5611348565b82525050565b60006020820190506113f060008301846113cc565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611430578082015181840152602081019050611415565b60008484015250505050565b6000601f19601f8301169050919050565b60006114588261143e565b6114628185611449565b935061147281856020860161141a565b61147b81611436565b840191505092915050565b6000602082019050818103600083015261149f818461144c565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060028204905060018216806114eb57607f821691505b6020821081036114fe576114fd6114a4565b5b50919050565b61150e6114da565b811461151957600080fd5b50565b60008151905061152b81611505565b92915050565b6000602082840312156115475761154661150d565b5b60006115558482850161151c565b91505092915050565b6115676114da565b82525050565b60006020820190506115826000830184611564565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156115c25780820151818401526020810190506115a7565b60008484015250505050565b6000601f19601f8301169050919050565b60006115ea82611588565b6115f48185611593565b93506116048185602086016115b7565b61160d8161159e565b840191505092915050565b6000602082019050818103600083015261163181846115dd565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000600282049050600182168061167d57607f821691505b6020821081036116905761168f611635565b5b50919050565b6116a061166c565b81146116ab57600080fd5b50565b6000815190506116bd81611693565b92915050565b6000602082840312156116d9576116d861169f565b5b60006116e7848285016116ae565b91505092915050565b6116f961166c565b82525050565b600060208201905061171460008301846116f0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611754578082015181840152602081019050611739565b60008484015250505050565b6000601f19601f8301169050919050565b600061177c82611762565b611786818561176d565b935061179681856020860161174f565b61179f81611745565b840191505092915050565b600060208201905081810360008301526117c38184611773565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000600282049050600182168061180f57607f821691505b602082108103611822576118216117c8565b5b50919050565b6118326117fe565b811461183d57600080fd5b50565b60008151905061184f81611829565b92915050565b60006020828403121561186b5761186a611831565b5b600061187984828501611840565b91505092915050565b61188b6117fe565b82525050565b60006020820190506118a66000830184611882565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156118e65780820151818401526020810190506118cb565b60008484015250505050565b6000601f19601f8301169050919050565b600061190e826118d3565b61191881856118de565b93506119288185602086016118e1565b611931816118da565b840191505092915050565b600060208201905081810360008301526119558184611903565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060028204905060018216806119a157607f821691505b6020821081036119b4576119b361195a565b5b50919050565b6119c4611990565b81146119cf57600080fd5b50565b6000815190506119e1816119bd565b92915050565b6000602082840312156119fd576119fc6119c6565b5b6000611a0b848285016119d4565b91505092915050565b611a1d611990565b82525050565b6000602082019050611a386000830184611a14565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a78578082015181840152602081019050611a5d565b60008484015250505050565b6000601f19601f8301169050919050565b6000611aa082611a65565b611aaa8185611a70565b9350611aba818560208601611a73565b611ac381611a7c565b840191505092915050565b60006020820190508181036000830152611ae78184611a95565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006002820490506001821680611b3357607f821691505b602082108103611b4657611b45611aec565b5b50919050565b611b56611b22565b8114611b6157600080fd5b50565b600081519050611b7381611b4d565b92915050565b600060208284031215611b8f57611b8e611b55565b5b6000611b9d84828501611b6a565b91505092915050565b611baf611b22565b82525050565b6000602082019050611bca6000830184611bab565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c0a578082015181840152602081019050611bef565b60008484015250505050565b6000601f19601f8301169050919050565b6000611c3282611c17565b611c3c8185611c22565b9350611c4c818560208601611c05565b611c5581611c0b565b840191505092915050565b60006020820190508181036000830152611c798184611c29565b90509291505056"
        
        return abi, bytecode
    
    async def deploy_to_network(self, network: str, testnet: bool = False) -> Dict:
        """Deploy contract to a specific network"""
        if network not in self.networks:
            raise ValueError(f"Network {network} not configured")
            
        config = self.networks[network]
        
        if not config['private_key']:
            print(f"⚠️  No private key configured for {network}")
            return None
            
        try:
            # Initialize Web3
            w3 = Web3(Web3.HTTPProvider(config['rpc']))
            
            if not w3.isConnected():
                print(f"❌ Failed to connect to {network}")
                return None
                
            # Set up account
            account = Account.from_key(config['private_key'])
            w3.eth.default_account = account.address
            
            # Get contract
            abi, bytecode = self._get_compiled_contract()
            
            # Create contract instance
            contract = w3.eth.contract(abi=abi, bytecode=bytecode)
            
            # Deploy contract
            print(f"🚀 Deploying to {network}...")
            
            # Build transaction
            construct_txn = contract.constructor(
                config['aave_pool_provider']
            ).buildTransaction({
                'from': account.address,
                'nonce': w3.eth.getTransactionCount(account.address),
                'gas': 5000000,
                'gasPrice': w3.toWei('30', 'gwei')
            })
            
            # Sign transaction
            signed_txn = w3.eth.account.sign_transaction(
                construct_txn, 
                private_key=config['private_key']
            )
            
            # Send transaction
            tx_hash = w3.eth.sendRawTransaction(signed_txn.rawTransaction)
            
            # Wait for receipt
            tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)
            
            if tx_receipt.status == 1:
                print(f"✅ Successfully deployed to {network}")
                print(f"📋 Contract Address: {tx_receipt.contractAddress}")
                print(f"🔗 Transaction: {config['explorer']}/tx/{tx_hash.hex()}")
                
                return {
                    'network': network,
                    'contract_address': tx_receipt.contractAddress,
                    'transaction_hash': tx_hash.hex(),
                    'explorer_url': f"{config['explorer']}/tx/{tx_hash.hex()}"
                }
            else:
                print(f"❌ Deployment failed on {network}")
                return None
                
        except Exception as e:
            print(f"❌ Error deploying to {network}: {str(e)}")
            return None
    
    async def deploy_all(self, testnet: bool = False) -> List[Dict]:
        """Deploy to all configured networks"""
        results = []
        
        for network in self.networks.keys():
            result = await self.deploy_to_network(network, testnet)
            if result:
                results.append(result)
        
        return results
    
    def save_deployment_info(self, deployments: List[Dict], filename: str = "deployment_info.json"):
        """Save deployment information to file"""
        with open(filename, 'w') as f:
            json.dump(deployments, f, indent=2)
        print(f"💾 Deployment info saved to {filename}")

async def main():
    parser = argparse.ArgumentParser(description="Deploy FlashLoan Arbitrage Contract")
    parser.add_argument("--network", help="Specific network to deploy to")
    parser.add_argument("--testnet", action="store_true", help="Deploy to testnet")
    parser.add_argument("--all", action="store_true", help="Deploy to all networks")
    
    args = parser.parse_args()
    
    deployer = ContractDeployer()
    
    if args.all:
        print("🌐 Deploying to all networks...")
        results = await deployer.deploy_all(args.testnet)
        deployer.save_deployment_info(results)
        
    elif args.network:
        print(f"🎯 Deploying to {args.network}...")
        result = await deployer.deploy_to_network(args.network, args.testnet)
        if result:
            deployer.save_deployment_info([result])
    else:
        print("🎯 Deploying to all networks...")
        results = await deployer.deploy_all(args.testnet)
        deployer.save_deployment_info(results)

if __name__ == "__main__":
    asyncio.run(main())